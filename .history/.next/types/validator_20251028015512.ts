// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { NextApiHandler, ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}

type ApiRouteConfig = {
  default: (req: any, res: any) => ReturnType<NextApiHandler>
  config?: {
    api?: {
      bodyParser?: boolean | { sizeLimit?: string }
      responseLimit?: string | number | boolean
      externalResolver?: boolean
    }
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    maxDuration?: number
  }
}


// Validate ../../src/app/(authentication)/auth/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/auth">> = Specific
  const handler = {} as typeof import("../../src/app/(authentication)/auth/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/workspace/[workspaceId]/channels/[channelId]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/workspace/[workspaceId]/channels/[channelId]">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/workspace/[workspaceId]/channels/[channelId]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/workspace/[workspaceId]/direct-message/[chatId]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/workspace/[workspaceId]/direct-message/[chatId]">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/workspace/[workspaceId]/direct-message/[chatId]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/workspace/[workspaceId]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/workspace/[workspaceId]">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/workspace/[workspaceId]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/create-workspace/[invite]/page.ts
{
  type __IsExpected<Specific extends AppPageConfig<"/create-workspace/[invite]">> = Specific
  const handler = {} as typeof import("../../src/app/create-workspace/[invite]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/create-workspace/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/create-workspace">> = Specific
  const handler = {} as typeof import("../../src/app/create-workspace/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/play/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/play">> = Specific
  const handler = {} as typeof import("../../src/app/play/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/work/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/work">> = Specific
  const handler = {} as typeof import("../../src/app/work/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(authentication)/auth/callback/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/auth/callback">> = Specific
  const handler = {} as typeof import("../../src/app/(authentication)/auth/callback/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(authentication)/auth/confirm/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/auth/confirm">> = Specific
  const handler = {} as typeof import("../../src/app/(authentication)/auth/confirm/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/auth/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/auth">> = Specific
  const handler = {} as typeof import("../../src/app/api/auth/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/livekit/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/livekit">> = Specific
  const handler = {} as typeof import("../../src/app/api/livekit/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/messages/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/messages">> = Specific
  const handler = {} as typeof import("../../src/app/api/messages/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/test-supabase/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/test-supabase">> = Specific
  const handler = {} as typeof import("../../src/app/api/test-supabase/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/uploadthing/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/uploadthing">> = Specific
  const handler = {} as typeof import("../../src/app/api/uploadthing/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/api/user/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/user">> = Specific
  const handler = {} as typeof import("../../src/app/api/livekit/route.jss")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}



// Validate ../../src/pages/api/web-socket/messages/[messageId].ts
{
  type __IsExpected<Specific extends ApiRouteConfig> = Specific
  const handler = {} as typeof import("../../src/pages/api/web-socket/messages/[messageId].js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/pages/api/web-socket/messages/index.ts
{
  type __IsExpected<Specific extends ApiRouteConfig> = Specific
  const handler = {} as typeof import("../../src/pages/api/web-socket/messages/index.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/(main)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/(main)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../src/app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
